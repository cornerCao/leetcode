/*Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
给出全排序 重点理解！！！
*/
//最傻逼的低效回溯法。。但是这个方法输出的是按字典序排序好的结果
class Solution {
public:
vector<vector<int>>ans;
    vector<vector<int>> permute(vector<int>& nums) {
        
        int len=nums.size();
        sort(&nums[0],&nums[len]);
        vector<int>record;
        for(int i=0;i<len;i++)record.push_back(0);
        vector<int>tmp;
        TRY(nums,record,0,tmp);
        return ans;
    }
    void TRY(vector<int>&nums,vector<int>record,int l,vector<int>tmp){
        int len=nums.size();
        if(l==len){
            ans.push_back(tmp);
            return;
        }
        for(int i=0;i<len;i++){
            if(record[i]==0){
                record[i]=1;
                tmp.push_back(nums[i]);
                TRY(nums,record,l+1,tmp);
                tmp.pop_back();//一定要注意回溯清空
                record[i]=0;
            }
        }
    }
};
//高端方法，就是递归 轮流把begin之后每个数字都交换放到begin的地方，就是每个数字轮流当第一位 递归下去就行
//因为这题没有要求按字典序排序 输出的是不按顺序的 但是速度很快
class Solution{
	public:
	vector<vector<int>>permute(vector<int>&nums){
		vector<vector<int>>ans;
		dfs(ans,nums,0);
		return ans;
	}
	void dfs(vector<vector<int>>&ans,vector<int>nums,int begin){
		if(begin>=nums.size()){
			ans.push_back(nums);
			return;
		}
		for(int i=begin;i<nums.size();i++){
			swap(nums[begin],nums[i]);
			dfs(ans,nums,begin+1);
			swap(nums[begin],nums[i]);
		}
	}
};
//还有一种方法就是不停调用next_permutation()函数，从第一个不停的往下输出就好了
