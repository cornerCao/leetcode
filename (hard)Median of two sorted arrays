/*这道题算法很奇妙，求两个排好序的数组的中位数，如[1,2],[3,4]结果是2.5，[1,3][2]结果是2，实际上转换为求第k大数，题目要求O(log(m+n))的复杂度，所以不
能直接线性扫描，因为线性扫描复杂度为O(m+n)，所以使用二分查找的方法，注意理解这种思想。*/
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) 
    {
        int m=nums1.size(),n=nums2.size();
        int K=(m+n)/2;
        if(m+n == 0)
        {
            return -1;
        }
        else if((m+n)%2==1)//odd 
        {
            return findKth(nums1,0,m,nums2,0,n,K);
        }
        else //even
        {
            return (findKth(nums1,0,m,nums2,0,n,K) + findKth(nums1,0,m,nums2,0,n,K-1))/2;
        }
    }

    double findKth(vector<int>&nums1,int L1,int len1,vector<int>&nums2,int L2,int len2,int K)//注意这个实际找的是第k+1大的数 坐标为k
    {
        if(len1>len2)
        {
            return findKth(nums2,L2,len2,nums1,L1,len1,K);
        }
        if(len1 == 0)//如果第一个数组为空
        {
            return (double) nums2[L2+K];
        }
        if(K==len1+len2-1)//一定要区分好到底要不要-1 数组
        {
            return (double)max(nums1[L1+len1-1],nums2[L2+len2-1]);
        }
        int i = len1/2;//二分查找
        int j = K-i;// 注意len1是否能整除2 不能的话两个加起来是k-1
        if(nums1[L1+i]>nums2[L2+j])
        {
            return findKth(nums1,L1,i,nums2,L2+j,len2-j,i);//去掉L2前面的j个数，去掉L1以及L1之后的数，处理后找下标为K-j=i的数，一定要记得去掉
        }
        else
        {
            return findKth(nums1,L1+i,len1-i,nums2,L2,j,j);//去掉L1前面的i个数，去掉L2以及L2之后的数，处理后找下标为K-i=j的数
        }
    }
};
/*还有一种类似做法 其实是一样的==相当于每次都去掉一半 也是二分
double findKth(int a[], int m, int b[], int n, int k)  
{  
    //always assume that m is equal or smaller than n  
    if (m > n)  
        return findKth(b, n, a, m, k);  
    if (m == 0)  
        return b[k - 1];  
    if (k == 1)  
        return min(a[0], b[0]);  
    //divide k into two parts  
    int pa = min(k / 2, m), pb = k - pa;  
    if (a[pa - 1] < b[pb - 1])  
        return findKth(a + pa, m - pa, b, n, k - pa);  
    else if (a[pa - 1] > b[pb - 1])  
        return findKth(a, m, b + pb, n - pb, k - pb);  
    else  
        return a[pa - 1];  
}  
  
class Solution  
{  
public:  
    double findMedianSortedArrays(int A[], int m, int B[], int n)  
    {  
        int total = m + n;  
        if (total & 0x1)  
            return findKth(A, m, B, n, total / 2 + 1);  
        else  
            return (findKth(A, m, B, n, total / 2)  
                    + findKth(A, m, B, n, total / 2 + 1)) / 2;  
    }  
}; 
