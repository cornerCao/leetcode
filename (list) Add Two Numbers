###############################################################################

You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

###############################################################################

注意：1.链表的head什么时候new 怎么用
      2.怎么处理最后一个节点，怎么delete
      3.两条输入链表可能不一样长
      
###############################################################################

class Solution {
public:
	ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
		ListNode *tmp1 = l1, *tmp2 = l2;
		ListNode *current = new ListNode(0);
		ListNode *head = &(*current);//不能head=current，否则head就会和current一样改变
		int jinwei = 0;
		int t = 0;
		while (!(tmp1 == NULL&&tmp2 == NULL)){//l1和l2可能不一样长，而当节点为NULL时默认为0
			int a = 0, b = 0;
			if (tmp1 != NULL)
				a = tmp1->val;
			if (tmp2 != NULL)
				b = tmp2->val;
			current->val += a + b;
			if (current->val >= 10){
				jinwei = current->val / 10;
				current->val = current->val % 10;
			}
			else{
				jinwei = 0;
			}
			current->next = new ListNode(jinwei);
			current = current->next;
			if (tmp1!=NULL)
				tmp1 = tmp1->next;
			if (tmp2!=NULL)
				tmp2 = tmp2->next;
		}
		if (current->val == 0){
			current = head;
			while (1){
				if (current->next->next == NULL){
					delete current->next;//注意delete的用法
					current->next = NULL;
					break;
				}
				else{
					current = current->next;
				}
			}
		}
		return head;
	}
};
