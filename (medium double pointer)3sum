/* Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.
就是在数组中找三个数和为0，可以排序后用双指针，双指针特别适用于排序号的数组中的查找*/
89ms
class Solution {
public:
    bool isSame(vector<int>v1,vector<int>v2){
        int len=v1.size();
        for(int i=0;i<len;i++){
            if(v1[i]!=v2[i])return false;
        }
        return true;
    }
	vector<vector<int>> threeSum(vector<int>& nums) {
	    int len=nums.size();
	    	    vector< vector<int> >ans;
	    	    if(len<3)return ans;//特别注意这种边界的问题 越界所以判断一下
	    sort(&nums[0],&nums[len]);//排序 注意sort函数的用法 注意vector的erase函数里面放迭代器
	    int last=nums[0];
	    int L=0;
	    for(int i=0;i<len-2;i++){
	        if(nums[i]==last&&i>0)continue;//跳过相同的值
	        else last=nums[i];
	        int targ=-nums[i];
	        int l=i+1;
	        int r=len-1;
	        for(;l<len-1&&l<r;l++){
	            while(l<r&&nums[r]>targ-nums[l])r--;//双指针
	        if(nums[r]+nums[l]==targ&&l<r){
	            vector<int>tmp;
	            tmp.push_back(nums[i]);
	            tmp.push_back(nums[l]);
	            tmp.push_back(nums[r]);
	            if(L==0){
	                ans.push_back(tmp);
	                L++;
	            }
	            if(L>0&&!isSame(tmp,ans[L-1])){//判断一下去掉相同的
	            ans.push_back(tmp);
	            L++;}
	        }
	        }
	    }
	    return ans;
	}
};
