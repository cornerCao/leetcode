/*
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
其实就是数组中可能有重复的数字 在原来的递归基础上加判断就好了
*/
class Solution{
	public:
	vector<vector<int>>permuteUnique(vector<int>&nums){
		vector<vector<int>>ans;
		dfs(ans,nums,0);
		return ans;
	}
	void dfs(vector<vector<int>>&ans,vector<int>nums,int begin){
		if(begin>=nums.size()){
			ans.push_back(nums);
			return;
		}
		for(int i=begin;i<nums.size();i++){
		int flag=0;
		for(int j=begin;j<i;j++)if(nums[j]==nums[i]){flag=1;break;}//判断一下如果之前出现过这个数字就不要再swap了
		if(flag==1)continue;
			swap(nums[begin],nums[i]);
			dfs(ans,nums,begin+1);
			swap(nums[begin],nums[i]);
		}
	}
};
