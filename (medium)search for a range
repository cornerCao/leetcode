/*
Given a sorted array of integers, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].其实就是找等于目标的区间 数组排好序的
*/
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int l,r,mid;
        vector<int>v;
        v.push_back(-1);
        v.push_back(-1);
        l=0;
        r=nums.size()-1;
        mid=(l+r)/2;
        int len=r+1;
        if(nums[l]>target||nums[r]<target){
            return v;
        }
        while(l<=r){
            mid=(l+r)/2;
            if(nums[mid]==target)break;
            if(nums[mid]<target)l=mid+1;
            if(nums[mid]>target)r=mid-1;
        }
        if(nums[mid]!=target){
            return v;
        }
        else{
            int val=1;
            while(mid-val>=0&&nums[mid-val]==target)val+=val;
            val=val/2;
            while(mid-val>=0&&nums[mid-val]==target)val++;
            v[0]=mid-val+1;
            val=1;
            while(mid+val<len&&nums[mid+val]==target)val+=val;
            val=val/2;
            while(mid+val<len&&nums[mid+val]==target)val++;
            v[1]=mid+val-1;
            return v;
        }
    }
};
