/*
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
*/
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        if(m==0)return 0;
        int n=obstacleGrid[0].size();
        if(n==0)return 0;
        int dp[101][101];
        memset(dp,0,sizeof(dp));
        dp[1][1]=1-obstacleGrid[0][0];
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(i==1&&j==1)continue;
                if(obstacleGrid[i-1][j-1])continue;//如果这点有障碍就略过
                if(i>=2&&obstacleGrid[i-2][j-1]==0)dp[i][j]+=dp[i-1][j];//保证前一步可以走   
                if(j>=2&&obstacleGrid[i-1][j-2]==0)dp[i][j]+=dp[i][j-1];
            }
        }
        return dp[m][n];
    }
};
