/*Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, 
find the area of largest rectangle in the histogram.
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
其实就是找连续的不低于某个高度的面积，用栈存储一个递增的高度 和位置，发现矮的地方就弹栈*/
class myNum{
public:
	int h;
	int loc;
	myNum(int H, int l) :h(H), loc(l){}
};
class Solution{
public:
	int largestRectangleArea(vector<int>&v){
		v.push_back(0);
		stack<myNum>stk;
		int len = v.size();
		int max = 0;
		for (int i = 0; i < len; i++){
			if (stk.empty())
				stk.push(myNum(v[i], i));
			else{
				int head = stk.top().h;
				if (head <= v[i]){
					stk.push(myNum(v[i], i));
				}
				else{
					//int cnt = 1;
					int top = 0;
					while ((!stk.empty()) && stk.top().h > v[i]){
						if (!stk.empty()){
							int tmp = (i - stk.top().loc)*stk.top().h;
							top = stk.top().loc;
							if (tmp >= max)
								max = tmp;
							stk.pop();
						}
					}
					if (stk.empty()){
						stk.push(myNum(v[i], top));

					}
					else{
						stk.push(myNum(v[i], top));
					}
				}
			}
		}
		return max;
	}
};
